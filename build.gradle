plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.180'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version + "-" + minecraft_version
group = mod_group_id

repositories {
    mavenLocal()

    flatDir {
        dirs("libraries")
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {

        systemProperty 'forge.logging.markers', 'REGISTRIES'


        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }


    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {


        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "curse.maven:sodium-394468:6382651"
    implementation "curse.maven:irisshaders-455508:6213632"
    implementation "curse.maven:worldedit-225608:5830452"
//    implementation "curse.maven:gravestone-mod-238551:5794085"
    implementation "curse.maven:flickerfix-431430:5424859"
//    implementation "curse.maven:asyncparticles-1215753:6963092"
//    implementation "curse.maven:placebo-283644:6446766"
//    implementation "curse.maven:fastworkbench-288885:5670423"


//    implementation "curse.maven:fdlib-1271749:7017013"

    implementation fileTree(dir: 'build/libraries', include: ['*.jar'])

    print("Added Libraries: \n")
    fileTree('build/libraries').visit { FileVisitDetails details ->
        print(details.name + '\n')
    }

}


tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            fdlib_version_range    : fdlib_version_range,
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
